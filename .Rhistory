library(knitr)
#Set up global knitr option so that text does not go off of the page
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(Hmisc)
library(dplyr)
cereal <- read.csv('cereal_dillons.csv')
library(knitr)
#Set up global knitr option so that text does not go off of the page
opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
library(Hmisc)
library(dplyr)
cereal <- read.csv('data/cereal_dillons.csv')
stand01 <- function(x){ (x - min(x)) / (max(x) - min(x))}
cereal2 <- data.frame(Shelf=cereal$Shelf,
sugar=stand01(x=cereal$sugar_g/cereal$size_g),
fat=stand01(x=cereal$fat_g/cereal$size_g),
sodium=stand01(x=cereal$sodium_mg/cereal$size_g))
library(ggplot2)
library(patchwork)
sugar <- ggplot(data = cereal2, aes(x = Shelf, group = Shelf, y = sugar, fill = factor(Shelf)))+
geom_boxplot()+
geom_dotplot(binaxis = 'y', stackdir='center',dotsize=1.8,binwidth = 0.01)+
labs(x = 'Shelf',
y = "Sugar (standard scaled)")+
theme_classic()+
theme(legend.position="none")
fat <- ggplot(data = cereal2, aes(x = Shelf, group = Shelf, y = fat, fill = factor(Shelf)))+
geom_boxplot()+
geom_dotplot(binaxis = 'y', stackdir='center',dotsize=1.8,binwidth = 0.01)+
labs(x = 'Shelf',
y = "Fat (standard scaled)")+
theme_classic()+
theme(legend.position = 'none')
sodium <- ggplot(data = cereal2, aes(x = Shelf, group = Shelf, y = sodium, fill = factor(Shelf)))+
geom_boxplot()+
geom_dotplot(binaxis = 'y', stackdir='center',dotsize=1.8,binwidth = 0.01)+
labs(x = 'Shelf',
y = "Sodium (standard scaled)")+
theme_classic()+
theme(legend.position = "none")
sugar | fat | sodium | plot_annotation(theme = theme(plot.title = element_text(hjust = 0.5)),title = "Boxplots with overlaid dot plots for scaled Sugar, Fat, and Sodium content")
library(GGally)
ggparcoord(cereal2, columns = 2:4, groupColumn = 1,
scale = 'globalminmax',
mapping=aes(color=factor(Shelf)))+
labs(x = 'Explanatory Variable',
y = 'Standard scaled proportion of ingredient',
color = "Shelf") +
theme_classic()
library(nnet)
mod.nom <- multinom(factor(Shelf) ~ sugar + fat + sodium, data = cereal2)
mod.nom
library(car)
Anova(mod.nom)
mod.nom.inter <- multinom(factor(Shelf) ~ sugar + fat + sodium + sugar:fat + sugar:sodium + fat:sodium + sugar:fat:sodium, data = cereal2)
mod.nom.inter
Anova(mod.nom.inter)
anova(mod.nom, mod.nom.inter, test = 'Chisq')
apple_jacks <- data.frame(serving_size = 28, sugar = 12, fat = 0.5, sodium = 130)
#Get a new dataframe for just the explanatory variables scaled by the serving size
cereal3 <- cereal/cereal$size_g
#This function will transform a data frame using serving size scaling, and min/max scaling from the fitted data
transform_new_data <- function(data) {
#define the standardize function that takes min/max from the fitted data set
standardize <- function(x, min_trait, max_trait){ (x - min_trait) / (max_trait - min_trait)}
#Generate the output dataframe
data_frame = data.frame(sugar = standardize(data$sugar / data$serving_size, min(cereal3$sugar_g), max(cereal3$sugar_g)),
fat = standardize(data$fat / data$serving_size, min(cereal3$fat_g), max(cereal3$fat_g)),
sodium = standardize(data$sodium / data$serving_size, min(cereal3$sodium_mg), max(cereal3$sodium_mg)))
return (data_frame)
}
apple_jacks_transformed <- transform_new_data(apple_jacks)
probs <- predict(mod.nom, newdata = apple_jacks_transformed, type = 'probs')
pdat <- data.frame(Shelf_1 = probs[1], Shelf_2 = probs[2], Shelf_3 = probs[3], Shelf_4 = probs[4])
rownames(pdat) = 'Probability'
pdat
library(dplyr)
#First get the mean fat and sodium values from cereal2
#Cereal2 contains values already normalized by serving_size, and min/max scaling
mean_fat <- mean(cereal2$fat)
mean_sodium <- mean(cereal2$sodium)
#The range of sugar we will scan is from min(sugar) to max(sugar), at intervals of 0.01
sugar_scan<- seq(min(cereal2$sugar), max(cereal2$sugar), 0.01)
#Generate input dataframe
sugar_scan_data <- data.frame(sugar = sugar_scan,
fat = mean_fat,
sodium = mean_sodium)
#Generate prediction probabilities for each Shelf
pi_hat_sugar_scan <- cbind(sugar = sugar_scan,
predict(mod.nom, newdata = sugar_scan_data, type = 'prob')) %>% data.frame()
names(pi_hat_sugar_scan) <- c('sugar', '1', '2', '3', '4')
library(tidyr)
#We recast the wide format into a long format for ggplot
pi_hat_plot <- gather(pi_hat_sugar_scan, key = Shelf, value = probs, 2:5)
#Generate line plot from dataset
ggplot(data = pi_hat_plot, aes(x = sugar, y = probs, color = Shelf)) +
geom_line()+
labs(x = 'Sugar (standard scaled)',
y = 'Probability',
color = "Shelf",
title = 'Probability of Shelf vs Sugar, at mean Fat/Sodium levels') +
theme_classic()+
theme(plot.title=element_text(hjust = 0.5))
#Get standard deviation of each variable
var.sd <- cereal2 %>% summarise_all(sd)
#Get c values corresponding to explanatory variables
c.value <- var.sd[2:4]
#Get coefficients corresponding to each explanatory variable for each of shelves 2-4 compared to shelf 1
coefs <- coef(mod.nom)[, 2:4]
#Perform ; c.value expanded into 2 columns for element-wise multiplcation with coefs matrix
#This generates per sd unit increase in the explanatory variables
OR <- exp(coefs * c.value [c(1,1,1),])
data.OR <- data.frame(OR, row.names = c('2vs1', '3vs1', '4vs1')) %>% round(4)
print('sd increase in explanatory variables')
data.OR
#This generates per sd unit decrease in the explanatory variables
OR <- exp(coefs * -c.value [c(1,1,1),])
data.OR <- data.frame(OR, row.names = c('2vs1', '3vs1', '4vs1')) %>% round(4)
print('sd decrease in explanatory variables')
data.OR
param.CI <- confint(mod.nom, level = 0.95)
level_2vs1 <-  exp(param.CI[,,1][2:4,] * t(c.value[c(1,1),]))
level_3vs1 <-  exp(param.CI[,,2][2:4,] * t(c.value[c(1,1),]))
level_4vs1 <-  exp(param.CI[,,3][2:4,] * t(c.value[c(1,1),]))
print("For std increase in explanatory variables")
print("Shelf 2 vs 1")
level_2vs1
print("Shelf 3 vs 1")
level_3vs1
print("Shelf 4 vs 1")
level_4vs1
mod.nom2 <- multinom(factor(Shelf, levels = c('2','1','3','4')) ~ sugar + fat + sodium, data = cereal2)
mod.nom2
param.CI <- confint(mod.nom2)
level_1vs2 <-  exp(param.CI[,,1][2:4,] * t(c.value[c(1,1),]))
level_3vs2 <-  exp(param.CI[,,2][2:4,] * t(c.value[c(1,1),]))
level_4vs2 <-  exp(param.CI[,,3][2:4,] * t(c.value[c(1,1),]))
print("Shelf 1 vs 2")
level_1vs2
print("Shelf 3 vs 2")
level_3vs2
print("Shelf 4 vs 2")
level_4vs2
drink <- read.csv('data/DeHartSimplified.csv')
Hmisc::describe(drink)
drink[drink$id == 42,]
drink[is.na(drink$desired) | is.na(drink$state),]
drink_cleaned <- drink %>% dplyr::select(-state) %>% drop_na()
summary(drink_cleaned$rosn)
ggplot(data = drink_cleaned, aes(x = rosn))+
geom_histogram() +
labs(x='Trait self-esteem',
y = "Count",
title='Histogram of trait self-esteem values') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))+
scale_x_continuous(breaks = table(drink_cleaned$rosn) %>% names() %>% as.numeric())
high_cutoff <- mean(drink_cleaned$rosn) + sd(drink_cleaned$rosn)
low_cutoff <- mean(drink_cleaned$rosn) - sd(drink_cleaned$rosn)
drink_cleaned$factor_rosn <- ifelse(drink_cleaned$rosn > high_cutoff, yes = 'H', no = ifelse(drink_cleaned$rosn < low_cutoff, yes = 'L', no = 'M')) %>% factor()
numall.box <- ggplot(drink_cleaned, aes(x = '', y = numall)) +
geom_boxplot(outlier.colour = 'red')+
geom_jitter(width = 0.35, alpha = 0.2) +
labs(y = "numall",
title='Boxplot of numall') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5), axis.text.x=element_blank(), axis.ticks.x = element_blank())
desired.box <- ggplot(drink_cleaned, aes(x = '', y = desired)) +
geom_boxplot(outlier.colour = 'red')+
geom_jitter(width = 0.35, alpha = 0.2) +
labs(y = "desired",
title='Boxplot of desired') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5), axis.text.x=element_blank(), axis.ticks.x = element_blank())
nrel.box <- ggplot(drink_cleaned, aes(x = '', y = nrel)) +
geom_boxplot(outlier.colour = 'red')+
geom_jitter(width = 0.35, alpha = 0.2) +
labs(y = "nrel",
title='Boxplot of nrel') +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5), axis.text.x=element_blank(), axis.ticks.x = element_blank())
numall.box + desired.box + nrel.box
drink_cleaned[drink_cleaned$nrel >= 5,]
#Perform the binning described above
drink_cleaned$numall_binned <- ifelse(drink_cleaned$numall > 7, yes = 7, no = drink_cleaned$numall) %>% factor()
ggplot(data = drink_cleaned, aes(x = numall_binned, y = nrel))+
geom_boxplot() +
labs(x = 'Number of drinks for the day',
y = "Negative romantic relationship events",
title='Distribution of Negative romantic events grouped by number of drinks') +
scale_x_discrete(labels = c('0', '1', '2', '3', '4', '5', '6', '>7')) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
counts_1 <- drink_cleaned %>% select(nrel, numall) %>% group_by_all() %>% summarise(count = n())
ggplot(data = counts_1, aes(x = nrel, y = numall, color = count))+
geom_point()+
labs(y = 'Number of drinks',
x = "Negative romantic relationship events",
title='Nrel vs number of drinks for each day',
color = 'number of data points') +
theme_classic() +
scale_color_gradient(low = 'blue', high = 'red') +
theme(plot.title = element_text(hjust = 0.5))
counts_2 <- drink_cleaned %>% select(nrel, desired) %>% group_by_all() %>% summarise(count = n())
ggplot(data = counts_2, aes(x = nrel, y = desired, color = count))+
geom_point()+
labs(y = 'Desire to drink',
x = "Negative romantic relationship events",
title='Nrel vs desire to drink',
color = 'number of data points') +
theme_classic() +
scale_color_gradient(low = 'blue', high = 'red') +
theme(plot.title = element_text(hjust = 0.5))
counts_3 <- drink_cleaned %>% select(rosn, numall, factor_rosn) %>% group_by_all() %>% summarise(count = n())
ggplot(counts_3, aes(x = rosn, y = numall, color = count, shape = factor_rosn))+
geom_point()+
labs(y = 'Number of drinks',
x = "Trait self-esteem",
title='Scatter plot of trait self-esteem versus number of drinks',
color = 'number of data points',
shape = 'Trait self-esteem') +
scale_shape(labels = c("High", 'Medium', "Low")) +
theme_classic() +
scale_color_gradient(low = 'blue', high = 'red') +
theme(plot.title = element_text(hjust = 0.5))
counts_4 <- drink_cleaned %>% select(rosn, desired, factor_rosn) %>% group_by_all() %>% summarise(count = n())
ggplot(counts_4, aes(x = rosn, y = desired, color = count, shape = factor_rosn))+
geom_point()+
labs(y = 'Desire to drink',
x = "Trait self-esteem",
title='Scatter plot of trait self-esteem versus desire to drink',
color = 'number of data points',
shape = 'Trait self-esteem') +
scale_shape(labels = c("High", 'Medium', "Low")) +
theme_classic() +
scale_color_gradient(low = 'blue', high = 'red') +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = drink_cleaned, aes(x = numall_binned, y = nrel, fill = factor_rosn))+
geom_boxplot() +
labs(x = 'Number of drinks for the day',
y = "Negative romantic relationship events",
title='Distribution of negative romantic events grouped by number of drinks',
fill = 'Trait Self-Esteem') +
scale_fill_discrete(labels = c("High", 'Medium', "Low")) +
scale_x_discrete(labels = c('0', '1', '2', '3', '4', '5', '6', '>7')) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
counts_5 <- drink_cleaned %>% select(nrel, numall, factor_rosn) %>% group_by_all() %>% summarise(count = n())
ggplot(counts_5, aes(x = nrel, y = numall, color = count, shape = factor_rosn))+
geom_point()+
labs(y = 'Number of drinks',
x = "Number negative relationship interactions",
title='Nrel vs numall, grouped by rosn',
color = 'number of data points',
shape = 'Trait self-esteem') +
scale_shape(labels = c("High", 'Medium', "Low")) +
theme_classic() +
scale_color_gradient(low = 'blue', high = 'red') +
theme(plot.title = element_text(hjust = 0.5))
drink_cleaned$desired.digit <- round(drink_cleaned$desired)
ggplot(data = drink_cleaned, aes(x = factor(desired.digit), y = nrel, fill = factor_rosn))+
geom_boxplot() +
labs(x = 'Desire to drink for the day',
y = "Negative romantic relationship events",
title='Distribution of negative romantic events grouped by desire to drink',
fill = 'Trait Self-Esteem') +
scale_fill_discrete(labels = c("High", 'Medium', "Low")) +
scale_x_discrete(labels = c('1', '2', '3', '4', '5', '6', '7', '8')) +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5))
data_scatter <- drink_cleaned %>% select(numall, dayweek, prel, gender, age)
scatterplotMatrix(data_scatter)
data_scatter <- drink_cleaned %>% select(desired, dayweek, prel, gender, age)
scatterplotMatrix(data_scatter)
mod.n <- glm(numall ~ nrel, data = drink_cleaned, family = poisson(link = 'log'))
mod.n
Anova(mod.n)
mod.nd <- glm(numall ~ nrel + dayweek, data = drink_cleaned, family = poisson(link = 'log'))
mod.nd
Anova(mod.nd)
mod.all <- glm(numall ~ nrel + dayweek + rosn + gender + prel, data = drink_cleaned, family = poisson(link = 'log'))
mod.all
Anova(mod.all)
mod.no.rosn <- glm(numall ~ nrel + dayweek + gender + prel, data = drink_cleaned, family = poisson(link = 'log'))
mod.no.rosn
Anova(mod.no.rosn)
mod.inter <- glm(numall ~ nrel + dayweek + gender + prel + nrel:rosn + prel:rosn, data = drink_cleaned, family = poisson(link = 'log'))
mod.inter
Anova(mod.inter)
mod.nrel.inter <- glm(numall ~ nrel + dayweek + gender + prel + nrel:rosn, data = drink_cleaned, family = poisson(link = 'log'))
mod.nrel.inter
Anova(mod.nrel.inter)
mod.best <- mod.nrel.inter
mod.best
mod.H0 <- glm(numall ~ dayweek + gender + prel, data = drink_cleaned, family = poisson(link = 'log'))
anova(mod.H0, mod.best, test = 'LR')
nrel.sd <- sd(drink_cleaned$nrel)
nrel.sd
rosn.quart <- quantile(drink_cleaned$rosn) %>% unname()
rosn.quart.first <- rosn.quart[2]
rosn.quart.median <- rosn.quart[3]
rosn.quart.third <- rosn.quart[4]
library(mcprofile)
#mcprofile setup; CI for 95%
#three rows for each level of rosn
K <- matrix(data = c(0, nrel.sd, 0, 0, 0, nrel.sd * rosn.quart.first,
0, nrel.sd, 0, 0, 0, nrel.sd * rosn.quart.median,
0, nrel.sd, 0, 0, 0, nrel.sd * rosn.quart.third), nrow = 3, byrow = TRUE)
linear.combo <- mcprofile(mod.best, CM = K)
#Profile LR
ci.lr.beta <- confint(linear.combo, level = 0.95)
#Wald
wald.lc <- wald(linear.combo)
ci.wald.beta <- confint(wald.lc, level = 0.95)
#Convert to percent change
estimate.pc <- 100 * (exp(ci.lr.beta$estimate) - 1)
#LR CI in percent change
lr.pc <- 100 * (exp(ci.lr.beta$confint) - 1)
#Wald CI in percent change
lr.wald <- 100 * (exp(ci.wald.beta$confint) - 1)
#Compile
headers <- c('Estimate', 'lower95%', 'upper95%')
rows <- c('q1.rosn', 'median.rosn', 'q3.rosn')
lr <- data.frame(cbind(estimate.pc, lr.pc))
w <- data.frame(cbind(estimate.pc, lr.wald))
colnames(lr) <- headers
rownames(lr) <- rows
colnames(w) <- headers
rownames(w) <- rows
print('Wald')
w
print('LR')
lr
mod.d.full <- glm(desired.digit ~ nrel + dayweek + gender + prel + rosn + nrel:rosn + prel:rosn, data = drink_cleaned, family = poisson(link = 'log'))
mod.d.full
Anova(mod.d.full)
mod.d.test <- glm(desired.digit ~ nrel + prel + rosn + nrel:rosn + prel:rosn, data = drink_cleaned, family = poisson(link = 'log'))
mod.d.test
Anova(mod.d.test)
mod.d.test2 <- glm(desired.digit ~ nrel + prel + nrel:rosn + prel:rosn, data = drink_cleaned, family = poisson(link = 'log'))
Anova(mod.d.test2)
mod.d.test3 <- glm(desired.digit ~ nrel + prel + rosn + prel:rosn, data = drink_cleaned, family = poisson(link = 'log'))
Anova(mod.d.test3)
mod.d.test4 <- glm(desired.digit ~ nrel + nrel:rosn, data = drink_cleaned, family = poisson(link = 'log'))
Anova(mod.d.test4)
mod.d.best <- glm(desired.digit ~ nrel + prel + rosn, data = drink_cleaned, family = poisson(link = 'log'))
mod.d.best
Anova(mod.d.best)
#Wald
wald.conf <- confint.default(mod.d.best, parm = 'nrel', level = 0.95)
wald.ci <- exp(confint.default(mod.d.best, parm = 'nrel', level = 0.95) * nrel.sd)
#Profile LR
conf.nrel <- confint(mod.d.best, parm = 'nrel', level = 0.95)
ci.nrel <- exp(conf.nrel * nrel.sd)
#wald and profile LR comparison
compare <- rbind(wald = wald.ci, profileLR = ci.nrel)
rownames(compare) <- c('wald', 'profileLR')
compare
#Estimate, and convert to percent change
estimate.pc <- 100*(exp(nrel.sd * mod.d.best$coefficients[['nrel']]) - 1)
ci.nrel.pc <- 100*(ci.nrel - 1)
t(data.frame(percent_change = c(estimate = estimate.pc, ci.nrel.pc)))
lr
nrel
data$nrel
drink_cleaned$nrel
drink_cleaned$desired
drink_cleaned$desired.digit
library(MASS)
mod.po <- polr(desired.digit ~ nrel + prel + rosn, data = drink_cleaned, method = 'logistic')
mod.po <- polr(factor(desired.digit) ~ nrel + prel + rosn, data = drink_cleaned, method = 'logistic')
mod.po
Anova(mod.po)
mod.best
mod.d.best
drink_cleaned
drink_cleaned %>% select(nrel, numall) %>% group_by_all() %>% summarise(count = n())
drink_cleaned %>% group_by_all() %>% summarise(count = n())
